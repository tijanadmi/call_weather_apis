package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"

	_ "github.com/godror/godror"
	"github.com/joho/godotenv"
)

type AutoGenerated struct {
	Metadata struct {
		Name                  string  `json:"name"`
		Latitude              float64 `json:"latitude"`
		Longitude             float64 `json:"longitude"`
		Height                int     `json:"height"`
		TimezoneAbbrevation   string  `json:"timezone_abbrevation"`
		UtcTimeoffset         float64 `json:"utc_timeoffset"`
		ModelrunUtc           string  `json:"modelrun_utc"`
		ModelrunUpdatetimeUtc string  `json:"modelrun_updatetime_utc"`
	} `json:"metadata"`
	Units struct {
		Time                     string `json:"time"`
		Predictability           string `json:"predictability"`
		PrecipitationProbability string `json:"precipitation_probability"`
		Pressure                 string `json:"pressure"`
		Relativehumidity         string `json:"relativehumidity"`
		Co                       string `json:"co"`
		Temperature              string `json:"temperature"`
		Winddirection            string `json:"winddirection"`
		Precipitation            string `json:"precipitation"`
		Windspeed                string `json:"windspeed"`
	} `json:"units"`
	DataDay struct {
		Time                     []string  `json:"time"`
		Pictocode                []float64 `json:"pictocode"`
		Uvindex                  []float64 `json:"uvindex"`
		TemperatureMax           []float64 `json:"temperature_max"`
		TemperatureMin           []float64 `json:"temperature_min"`
		TemperatureMean          []float64 `json:"temperature_mean"`
		FelttemperatureMax       []float64 `json:"felttemperature_max"`
		FelttemperatureMin       []float64 `json:"felttemperature_min"`
		Winddirection            []float64 `json:"winddirection"`
		PrecipitationProbability []float64 `json:"precipitation_probability"`
		Rainspot                 []string  `json:"rainspot"`
		PredictabilityClass      []float64 `json:"predictability_class"`
		Predictability           []float64 `json:"predictability"`
		Precipitation            []float64 `json:"precipitation"`
		Snowfraction             []float64 `json:"snowfraction"`
		SealevelpressureMax      []float64 `json:"sealevelpressure_max"`
		SealevelpressureMin      []float64 `json:"sealevelpressure_min"`
		SealevelpressureMean     []float64 `json:"sealevelpressure_mean"`
		WindspeedMax             []float64 `json:"windspeed_max"`
		WindspeedMean            []float64 `json:"windspeed_mean"`
		WindspeedMin             []float64 `json:"windspeed_min"`
		RelativehumidityMax      []float64 `json:"relativehumidity_max"`
		RelativehumidityMin      []float64 `json:"relativehumidity_min"`
		RelativehumidityMean     []float64 `json:"relativehumidity_mean"`
		ConvectivePrecipitation  []float64 `json:"convective_precipitation"`
		PrecipitationHours       []float64 `json:"precipitation_hours"`
		Humiditygreater90Hours   []float64 `json:"humiditygreater90_hours"`
	} `json:"data_day"`
}

func main() {
	err := godotenv.Load()
	if err != nil {
		fmt.Println(err)
	}

	user := os.Getenv("USER")
	if user == "" {
		fmt.Println(err)
	}

	pass := os.Getenv("PASS")
	if pass == "" {
		fmt.Println(err)
	}

	host := os.Getenv("HOST")
	if host == "" {
		fmt.Println(err)
	}
	/// new part stop

	connectionString := "oracle://" + user + ":" + pass + "@" + host
	db, err := sql.Open("godror", connectionString)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer db.Close()

	err = nil

	transx, err := db.Begin()
	if err != nil {
		fmt.Println(err)
		return
	}

	// Create statement
	stmt, err := db.Prepare(`SELECT
									NAME,
									LATITUDE,
									LONGITUDE,
									API_KEY
								FROM
									DWH_WEATHER_POINTS`)
	if err != nil {
		panic(err)
	}
	defer stmt.Close()

	// Execute statement
	rows, err := stmt.Query()
	if err != nil {
		panic(err)
	}

	// Iterate over results
	for rows.Next() {
		// Define columns
		var (
			NAME      string
			LATITUDE  string
			LONGITUDE string
			API_KEY   string
		)

		// Scan columns
		err = rows.Scan(&NAME,
			&LATITUDE,
			&LONGITUDE,
			&API_KEY)
		if err != nil {
			panic(err)
		}

		url := "https://my.meteoblue.com/packages/basic-day?apikey=" + API_KEY + "&name=" + NAME + "&lat=" + LATITUDE + "&lon=" + LONGITUDE +
			"&asl=120&format=json&tz=Europe%2FBelgrade&history_days=1&forecast_days=1"

		/*url := fmt.Sprintf("https://my.meteoblue.com/packages/basic-day?apikey=%s&name=%s&lat=%s&lon=%s&asl=120&format=json&tz=Europe%2FBelgrade&history_days=1&forecast_days=1", API_KEY, NAME, LATITUDE, LONGITUDE)*/

		req, _ := http.NewRequest("GET", url, nil)
		res, err := http.DefaultClient.Do(req)
		if err != nil {
			fmt.Println("Error Unmarshal")
			panic(err)
		}
		defer res.Body.Close()
		body, _ := ioutil.ReadAll(res.Body)

		//fmt.Println(string(body))

		/// new part start

		//data := AutoGeneratedNodes{}
		var data AutoGenerated
		err = json.Unmarshal([]byte(body), &data)
		if err != nil {
			fmt.Println("Error Unmarshal")
			panic(err)
		}
		_, err = db.Exec("INSERT INTO dwh_weather VALUES(:1,:2,:3,:4,:5,:6,:7,:8,:9,:10,:11,:12,:13,:14,:15,:16,:17,:18,:19,:20,:21,:22,:23,:24,:25,:26,:27,:28,:29,:30,:31,:32,:33,:34,:35)",
			data.Metadata.Name, data.Metadata.Latitude, data.Metadata.Longitude, data.Metadata.Height, data.Metadata.TimezoneAbbrevation, data.Metadata.UtcTimeoffset, data.Metadata.ModelrunUtc, data.Metadata.ModelrunUpdatetimeUtc,
			data.DataDay.Time[0], data.DataDay.Pictocode[0], data.DataDay.Uvindex[0], data.DataDay.TemperatureMax[0], data.DataDay.TemperatureMin[0], data.DataDay.TemperatureMean[0], data.DataDay.FelttemperatureMax[0], data.DataDay.FelttemperatureMin[0],
			data.DataDay.Winddirection[0], data.DataDay.PrecipitationProbability[0], data.DataDay.Rainspot[0], data.DataDay.PredictabilityClass[0], data.DataDay.Predictability[0], data.DataDay.Precipitation[0], data.DataDay.Snowfraction[0], data.DataDay.SealevelpressureMax[0],
			data.DataDay.SealevelpressureMin[0], data.DataDay.SealevelpressureMean[0], data.DataDay.WindspeedMax[0], data.DataDay.WindspeedMean[0], data.DataDay.WindspeedMin[0], data.DataDay.RelativehumidityMax[0], data.DataDay.RelativehumidityMin[0], data.DataDay.RelativehumidityMean[0],
			data.DataDay.ConvectivePrecipitation[0], data.DataDay.PrecipitationHours[0], data.DataDay.Humiditygreater90Hours[0])
		if err != nil {
			fmt.Println(".....Error Inserting data")
			fmt.Println(err)
			return
		}

	}

	// complete the transaction
	err = transx.Commit()
	if err != nil {
		fmt.Println(".....Error Committing Transaction")
		fmt.Println(err)
		return
	}

	fmt.Printf("OK")

}
